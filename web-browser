#!/usr/bin/gjs
 
const Gtk = imports.gi.Gtk;
const WebKit = imports.gi.WebKit;
const Lang = imports.lang;
 
const WebBrowser = new Lang.Class({
	Name: 'WebBrowser',
	Extends: Gtk.Application,
	 
	////////////////////////////////////////// 
	_init: function() 
	{
		this.parent({application_id: 'org.example.WebBrowser' });
		this._homeUrl = "http://www.gnome.org";
		this.connect('activate', Lang.bind(this, this._onActivate));
		this.connect('startup', Lang.bind(this, this._onStartup));
	},
	////////////////////////////////////////// 
	_onActivate: function() 
	{
		this._window.present();
		this._urlBar.grab_focus();
		this._webView.open(this._homeUrl);
	},
	////////////////////////////////////////// 
	_onStartup: function() 
	{
		this._buildUI();
		this._connectSignals();
	},
	////////////////////////////////////////// 
	_buildUI: function() 
	{
		this._window = new Gtk.ApplicationWindow({	application: this,
													window_position: Gtk.WindowPosition.CENTER,
													default_height: 768,
													default_width: 1024,
													border_width: 0,
													title: "WebKit Sample"});
 		let toolbar = new Gtk.Toolbar();
		this._backButton = new Gtk.ToolButton({ stock_id: Gtk.STOCK_GO_BACK });
		this._forwardButton = new Gtk.ToolButton({ stock_id: Gtk.STOCK_GO_FORWARD });
		this._reloadButton = new Gtk.ToolButton({ stock_id: Gtk.STOCK_REFRESH });
		this._urlBar = new Gtk.Entry();
		let urlbar = new Gtk.ToolItem({ child: this._urlBar });
		urlbar.set_expand(true);
		toolbar.add(this._backButton);
		toolbar.add(this._forwardButton);
		toolbar.add(urlbar);
		toolbar.add(this._reloadButton);
		this._webView = new WebKit.WebView();
		let scrolledWindow = new Gtk.ScrolledWindow ({	hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,
														vscrollbar_policy: Gtk.PolicyType.AUTOMATIC });
		scrolledWindow.add(this._webView);
		let box = new Gtk.Box({	orientation: Gtk.Orientation.VERTICAL,
								homogeneous: false,
								spacing: 0 });
		box.pack_start(toolbar, false, true, 0);
		box.pack_start(scrolledWindow, true, true, 0);
		this._window.add(box);
		this._window.show_all();
	},
	////////////////////////////////////////// 
	_connectSignals: function() 
	{
		this._urlBar.connect('activate', Lang.bind(this, function()
		{
			this._webView.open(this._urlBar.text);
		}));
		this._webView.connect('title-changed', Lang.bind(this, function(source, frame, title) 
		{
			this._window.set_title(title);
		}));
		this._webView.connect('load-committed', Lang.bind(this,	function(source, frame) 
		{
			this._urlBar.text = frame.get_uri ();
			this._updateButtons();
		}));
		this._backButton.connect('clicked', Lang.bind(this,	function() 
		{
			this._webView.go_back();
		}));
		this._forwardButton.connect('clicked', Lang.bind(this, function()
		{
			this._webView.go_forward();
		}));
		this._reloadButton.connect('clicked', Lang.bind(this, function() 
		{
			this._webView.reload();
		}));
	},
	////////////////////////////////////////// 
	_updateButtons: function() 
	{
		this._backButton.sensitive = this._webView.can_go_back();
		this._forwardButton.sensitive = this._webView.can_go_forward();
	}
});
 
let app = new WebBrowser ();
app.run (ARGV); 
